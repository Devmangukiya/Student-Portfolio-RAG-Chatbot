<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Athena | Student Portfolio AI</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <!-- Babel for JSX compilation -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        
        :root {
            --bg-color: #0c0a1a;
            --primary-glow: rgba(173, 11, 238, 0.5);
            --secondary-glow: rgba(7, 136, 222, 0.5);
        }

        body {
            font-family: 'Inter', sans-serif;
            overflow: hidden;
            background-color: var(--bg-color);
            color: #f0f0f0;
        }

        /* --- The "Cosmic Rift" Animated Background --- */
        #cosmic-background {
            position: fixed; top: 0; left: 0; width: 100%; height: 100%;
            z-index: -1; overflow: hidden;
        }
        .rift-shape {
            position: absolute; border-radius: 100%;
            filter: blur(120px); will-change: transform;
        }
        #shape1 {
            width: 700px; height: 700px;
            background: radial-gradient(circle, var(--primary-glow) 10%, transparent 70%);
            top: -250px; left: -250px;
            animation: moveShape1 25s infinite alternate ease-in-out;
        }
        #shape2 {
            width: 600px; height: 600px;
            background: radial-gradient(circle, var(--secondary-glow) 10%, transparent 70%);
            bottom: -200px; right: -200px;
            animation: moveShape2 30s infinite alternate ease-in-out;
        }
        #shape3 {
            width: 500px; height: 500px;
            background: radial-gradient(circle, rgba(255, 179, 71, 0.4) 10%, transparent 70%);
            bottom: 100px; left: 150px;
            animation: moveShape3 22s infinite alternate ease-in-out;
        }

        @keyframes moveShape1 {
            from { transform: translate(0, 0) rotate(0deg) scale(1); }
            to { transform: translate(150px, 200px) rotate(120deg) scale(1.2); }
        }
        @keyframes moveShape2 {
            from { transform: translate(0, 0) rotate(0deg) scale(1); }
            to { transform: translate(-200px, -150px) rotate(-150deg) scale(1.1); }
        }
        @keyframes moveShape3 {
            from { transform: translate(0, 0) rotate(0deg) scale(1); }
            to { transform: translate(150px, -150px) rotate(60deg) scale(1.3); }
        }

        /* --- The "Crystal" Glass Chat Window --- */
        #chat-window {
            backdrop-filter: blur(25px) saturate(120%);
            -webkit-backdrop-filter: blur(25px) saturate(120%);
            background: linear-gradient(135deg, rgba(255, 255, 255, 0.08), rgba(255, 255, 255, 0.02));
            border: 1px solid rgba(255, 255, 255, 0.1);
            transition: box-shadow 0.3s ease;
        }
        #chat-window:hover {
             box-shadow: 0 0 50px rgba(173, 11, 238, 0.15);
        }

        /* --- Custom Scrollbar & Other Styles --- */
        .message-container { 
            animation: fadeIn 0.6s cubic-bezier(0.25, 1, 0.5, 1);
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(20px) scale(0.98); }
            to { opacity: 1; transform: translateY(0) scale(1); }
        }
        
        .prose p { color: #d1d5db; margin: 0.5em 0; }
        .prose strong, .prose h1, .prose h2, .prose h3, .prose a { color: #ffffff; }
    </style>
</head>
<body class="flex items-center justify-center h-screen p-4">

    <div id="cosmic-background">
        <div id="shape1" class="rift-shape"></div>
        <div id="shape2" class="rift-shape"></div>
        <div id="shape3" class="rift-shape"></div>
    </div>

    <div id="root" class="w-full h-full max-w-4xl mx-auto"></div>

    <script type="text/babel">
      const { useState, useEffect, useRef } = React;

      // --- React Components ---

      const App = () => {
        const [messages, setMessages] = useState([
          { type: 'bot', content: '<p>Hello! I am Athena. How can I assist you with the student records today?</p>', isHtml: true }
        ]);
        const [userInput, setUserInput] = useState('');
        const [isLoading, setIsLoading] = useState(false);
        const chatEndRef = useRef(null);

        useEffect(() => {
          chatEndRef.current?.scrollIntoView({ behavior: 'smooth' });
        }, [messages]);

        const handleSubmit = async (e) => {
          e.preventDefault();
          const query = userInput.trim();
          if (!query || isLoading) return;

          setMessages(prev => [...prev, { type: 'user', content: query }]);
          setUserInput('');
          setIsLoading(true);

          try {
            const response = await fetch('/get_response', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ query }),
            });

            if (!response.ok) throw new Error('Network error');
            const data = await response.json();
            const responseText = data.response || "Sorry, I couldn't get a response.";
            const renderedHtml = marked.parse(responseText);
            setMessages(prev => [...prev, { type: 'bot', content: renderedHtml, isHtml: true }]);
          } catch (error) {
            console.error('Error:', error);
            const errorHtml = marked.parse("Sorry, an internal error occurred. Please check the server logs.");
            setMessages(prev => [...prev, { type: 'bot', content: errorHtml, isHtml: true }]);
          } finally {
            setIsLoading(false);
          }
        };

        return (
          <div id="chat-window" className="w-full h-full rounded-3xl shadow-2xl flex flex-col">
            <Header />
            <ChatMessages messages={messages} isLoading={isLoading} chatEndRef={chatEndRef} />
            <ChatInput 
              userInput={userInput}
              setUserInput={setUserInput}
              handleSubmit={handleSubmit}
              isLoading={isLoading}
            />
          </div>
        );
      };

      const Header = () => (
        <header className="p-4 border-b border-white/10 flex items-center justify-between flex-shrink-0">
          <div className="flex items-center gap-4">
            <div className="w-11 h-11 bg-gradient-to-tr from-[#9333ea] to-[#3b82f6] rounded-full flex items-center justify-center shadow-lg ring-2 ring-white/10">
              <svg className="w-6 h-6 text-white" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth="2">
                <path strokeLinecap="round" strokeLinejoin="round" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
              </svg>
            </div>
            <div>
              <h1 className="text-lg font-bold text-white">Athena AI</h1>
              {/* As requested, the "Online" text is removed */}
            </div>
          </div>
        </header>
      );
      
      const ChatMessages = ({ messages, isLoading, chatEndRef }) => (
        <main className="flex-1 overflow-y-auto p-6 space-y-6">
          {messages.map((msg, index) => <ChatMessage key={index} msg={msg} />)}
          {isLoading && <TypingIndicator />}
          <div ref={chatEndRef} />
        </main>
      );
      
      const ChatMessage = ({ msg }) => {
          const botAvatar = `<div class="w-9 h-9 bg-black/20 backdrop-blur-sm rounded-full flex-shrink-0 shadow-inner flex items-center justify-center border border-white/10"><svg class="w-5 h-5 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg></div>`;
          const userAvatar = `<div class="w-9 h-9 bg-gradient-to-tr from-indigo-500 to-blue-400 rounded-full flex-shrink-0 shadow-inner flex items-center justify-center border border-white/20"><svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path></svg></div>`;
          
          return (
            <div className="message-container">
              <div className={`message flex items-start gap-3 ${msg.type === 'user' ? 'justify-end' : 'max-w-xl'}`}>
                {msg.type === 'bot' && <div dangerouslySetInnerHTML={{ __html: botAvatar }} />}
                <div 
                  className={`p-4 rounded-xl shadow-lg prose prose-sm max-w-none border border-white/10 ${msg.type === 'user' ? 'bg-white/10 backdrop-blur-sm text-gray-200 rounded-br-none' : 'bg-black/30 backdrop-blur-sm text-gray-300 rounded-bl-none'}`}
                  dangerouslySetInnerHTML={{ __html: msg.isHtml ? msg.content : `<p>${msg.content}</p>` }}
                />
                {msg.type === 'user' && <div dangerouslySetInnerHTML={{ __html: userAvatar }} />}
              </div>
            </div>
          );
      };

      const TypingIndicator = () => (
          <div className="message-container message flex items-start gap-3">
              <div className="w-9 h-9 bg-black/20 backdrop-blur-sm rounded-full flex-shrink-0 shadow-inner flex items-center justify-center border border-white/10">
                  <svg className="w-5 h-5 text-white/70" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path></svg>
              </div>
              <div className="bg-black/30 backdrop-blur-sm p-4 rounded-xl rounded-bl-none shadow-lg border border-white/10">
                  <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse"></div>
                      <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" style={{ animationDelay: '0.15s' }}></div>
                      <div className="w-2 h-2 bg-indigo-400 rounded-full animate-pulse" style={{ animationDelay: '0.3s' }}></div>
                  </div>
              </div>
          </div>
      );
      
      const ChatInput = ({ userInput, setUserInput, handleSubmit, isLoading }) => (
        <footer className="p-4 border-t border-white/10">
          <form onSubmit={handleSubmit} className="flex items-center gap-3">
            <input 
              type="text" 
              value={userInput}
              onChange={(e) => setUserInput(e.target.value)}
              className="w-full text-base p-4 bg-black/20 text-white placeholder-gray-400 border border-white/10 rounded-full focus:outline-none focus:ring-2 focus:ring-[#9333ea] transition-all duration-300" 
              placeholder="Ask Athena a question..." 
              autoComplete="off"
              disabled={isLoading}
            />
            <button 
              type="submit" 
              disabled={isLoading}
              className="bg-gradient-to-br from-[#9333ea] to-[#3b82f6] text-white p-3 rounded-full hover:from-purple-500 hover:to-blue-500 focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-offset-2 focus:ring-offset-bg-color transition-all duration-300 transform hover:scale-110 shadow-xl disabled:opacity-50 disabled:scale-100"
            >
              <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path></svg>
            </button>
          </form>
        </footer>
      );

      // --- Mount the App ---
      const root = ReactDOM.createRoot(document.getElementById('root'));
      root.render(<App />);
    </script>
</body>
</html>

